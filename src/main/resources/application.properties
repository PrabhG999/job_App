# PostgreSQL database connection settings
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres

# Hibernate and JPA settings
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Since we're using PostgreSQL, disable H2 console
spring.h2.console.enabled=false

# Specify the driver class for PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

#Actuator
#want to expose everything using actuator like beans , caches. Rerun and check actuator base url in Postman
management.endpoints.web.exposure.include=*
#show details of the health endpoint
management.endpoint.health.show-details=always

#Application details

info.app.name = jobAppSpringB
info.app.description  = Built from scratch by Prabhjee Singh
info.app.version = 1.0.0
#Display information in get-call for /info
management.info.env.enabled=true





# spring.jpa.hibernate.ddl-auto=none
# No change to the database structure.

# spring.jpa.hibernate.ddl-auto=validate
# Validate the schema, makes no changes to the database.

# spring.jpa.hibernate.ddl-auto=update
# Update the schema if necessary.

# spring.jpa.hibernate.ddl-auto=create
# Create the schema, destroying previous data.

# spring.jpa.hibernate.ddl-auto=create-drop
# Create the schema and drop it when the SessionFactory is closed, usually when the application is stopped.

# spring.jpa.hibernate.ddl-auto=none
# Do not perform any schema generation.

# spring.jpa.hibernate.ddl-auto=update
# Update the schema to reflect the entities being persisted.

# Note: For production environments, it's recommended to use 'none' or 'validate' and manage schema changes through migrations.
